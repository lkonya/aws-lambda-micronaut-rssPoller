import com.github.jengelman.gradle.plugins.shadow.transformers.Log4j2PluginsCacheFileTransformer
import jp.classmethod.aws.gradle.lambda.AWSLambdaMigrateFunctionTask

plugins {
    id "io.spring.dependency-management" version "1.0.6.RELEASE"
    id "com.github.johnrengelman.shadow" version "4.0.2"
    id "application"
    id "jp.classmethod.aws.lambda" version "0.38"
    id "org.jetbrains.kotlin.jvm" version "1.3.21"
    id "org.jetbrains.kotlin.kapt" version "1.3.21"
    id "org.jetbrains.kotlin.plugin.allopen" version "1.3.21"
}

version "0.1"
group "rss.poller"

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://jcenter.bintray.com" }
}

dependencyManagement {
    imports {
        mavenBom 'io.micronaut:micronaut-bom:1.1.0.RC2'
    }
}

configurations {
    // for dependencies that are needed for development only
    developmentOnly 
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}"
    compile "org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}"
    compile "io.micronaut:micronaut-runtime"
    compile "io.micronaut:micronaut-function-aws"
    compile "rome:rome:1.0"
    compile "io.micronaut:micronaut-http-client"
    compile "software.amazon.awssdk:sqs:2.5.24"

    kapt "io.micronaut:micronaut-inject-java"
    kapt "io.micronaut:micronaut-validation"
    kaptTest "io.micronaut:micronaut-inject-java"

    runtime "ch.qos.logback:logback-classic:1.2.3"
    runtime "com.amazonaws:aws-lambda-java-log4j2:1.0.0"
    runtime "org.apache.logging.log4j:log4j-slf4j-impl:2.9.1"
    
    testCompile "org.junit.jupiter:junit-jupiter-api"
    testCompile "org.jetbrains.spek:spek-api:1.1.5"
    testCompile "io.micronaut:micronaut-function-client"
    testRuntime "org.junit.jupiter:junit-jupiter-engine"
    testRuntime "org.jetbrains.spek:spek-junit-platform-engine:1.1.5"
    testRuntime "io.micronaut:micronaut-http-server-netty"
    testRuntime "io.micronaut:micronaut-function-web"
}

shadowJar {
    transform(Log4j2PluginsCacheFileTransformer)
    mergeServiceFiles()
}

run.classpath += configurations.developmentOnly
test.classpath += configurations.developmentOnly
run.jvmArgs('-noverify', '-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote')

test {
    useJUnitPlatform()
}

allOpen {
	annotation("io.micronaut.aop.Around")
}

compileKotlin {
	kotlinOptions {
	    jvmTarget = '1.8' 
	    //Will retain parameter names for Java reflection
	    javaParameters = true 
	}
}

compileTestKotlin {
	kotlinOptions {
	    jvmTarget = '1.8' 
	    javaParameters = true 
	}
}
mainClassName = "rss.poller.RssPollerFunctionKt"
applicationDefaultJvmArgs = [""]

jar {
    manifest {
        attributes 'Main-Class': mainClassName
    }
}

if(new File("${System.getProperty("user.home")}/.aws/credentials").exists()) {
    task deploy(type: AWSLambdaMigrateFunctionTask, dependsOn: shadowJar) {
        functionName = "rss-poller"
        handler = "rss.poller.RssPollerFunction::apply"
        role = "arn:aws:iam::804193320004:role/lambda-basic-role"
        runtime = com.amazonaws.services.lambda.model.Runtime.Java8
        zipFile = shadowJar.archivePath
        memorySize = 192
        timeout = 60
    }
}
